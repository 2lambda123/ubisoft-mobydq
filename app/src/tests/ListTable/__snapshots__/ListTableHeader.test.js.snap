// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ListTableHeader unit test matches snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ListTableHeader
    headerNames={
      Array [
        "id",
        "name",
        "longName",
        "",
      ]
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": <WithStyles(TableRow)>
        <ListTableCell
          contents="Id"
        />
        <ListTableCell
          contents="Name"
        />
        <ListTableCell
          contents="Long Name"
        />
        <ListTableCell
          contents=""
        />
        <ListTableCell
          contents="Actions"
        />
      </WithStyles(TableRow)>,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <ListTableCell
            contents="Id"
          />,
          <ListTableCell
            contents="Name"
          />,
          <ListTableCell
            contents="Long Name"
          />,
          <ListTableCell
            contents=""
          />,
          <ListTableCell
            contents="Actions"
          />,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": "Id",
          "nodeType": "function",
          "props": Object {
            "contents": "Id",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": "Name",
          "nodeType": "function",
          "props": Object {
            "contents": "Name",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": "Long Name",
          "nodeType": "function",
          "props": Object {
            "contents": "Long Name",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": "",
          "nodeType": "function",
          "props": Object {
            "contents": "",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": "Actions",
          "nodeType": "function",
          "props": Object {
            "contents": "Actions",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": [Function],
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": <WithStyles(TableRow)>
          <ListTableCell
            contents="Id"
          />
          <ListTableCell
            contents="Name"
          />
          <ListTableCell
            contents="Long Name"
          />
          <ListTableCell
            contents=""
          />
          <ListTableCell
            contents="Actions"
          />
        </WithStyles(TableRow)>,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            <ListTableCell
              contents="Id"
            />,
            <ListTableCell
              contents="Name"
            />,
            <ListTableCell
              contents="Long Name"
            />,
            <ListTableCell
              contents=""
            />,
            <ListTableCell
              contents="Actions"
            />,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": "Id",
            "nodeType": "function",
            "props": Object {
              "contents": "Id",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": "Name",
            "nodeType": "function",
            "props": Object {
              "contents": "Name",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": "Long Name",
            "nodeType": "function",
            "props": Object {
              "contents": "Long Name",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": "",
            "nodeType": "function",
            "props": Object {
              "contents": "",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": "Actions",
            "nodeType": "function",
            "props": Object {
              "contents": "Actions",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
