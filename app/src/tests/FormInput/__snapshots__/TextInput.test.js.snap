// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`TextInput unit test matches snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <TextInput
    error=""
    helperText="Helper Text"
    id="Id"
    label="Label"
    onBlur={[MockFunction]}
    onChange={[MockFunction]}
    placeholder="Enter indicator name"
    touched="true"
    value="value"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": Array [
        <WithStyles(FormControlLabel)
          control={
            <React.Fragment>
              <TextField
                fullWidth={true}
                helperText="Helper Text"
                id="Id"
                label="Label"
                margin="dense"
                onBlur={[MockFunction]}
                onChange={[MockFunction]}
                placeholder="Enter indicator name"
                required={false}
                select={false}
                type="text"
                value="value"
                variant="outlined"
              />
            </React.Fragment>
          }
          label=""
        />,
        <WithStyles(FormHelperText)>
          
        </WithStyles(FormHelperText)>,
      ],
      "error": false,
      "style": Object {
        "width": "500px",
      },
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "control": <React.Fragment>
            <TextField
              fullWidth={true}
              helperText="Helper Text"
              id="Id"
              label="Label"
              margin="dense"
              onBlur={[MockFunction]}
              onChange={[MockFunction]}
              placeholder="Enter indicator name"
              required={false}
              select={false}
              type="text"
              value="value"
              variant="outlined"
            />
          </React.Fragment>,
          "label": "",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": "",
        },
        "ref": null,
        "rendered": "",
        "type": [Function],
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <WithStyles(FormControlLabel)
            control={
              <React.Fragment>
                <TextField
                  fullWidth={true}
                  helperText="Helper Text"
                  id="Id"
                  label="Label"
                  margin="dense"
                  onBlur={[MockFunction]}
                  onChange={[MockFunction]}
                  placeholder="Enter indicator name"
                  required={false}
                  select={false}
                  type="text"
                  value="value"
                  variant="outlined"
                />
              </React.Fragment>
            }
            label=""
          />,
          <WithStyles(FormHelperText)>
            
          </WithStyles(FormHelperText)>,
        ],
        "error": false,
        "style": Object {
          "width": "500px",
        },
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "control": <React.Fragment>
              <TextField
                fullWidth={true}
                helperText="Helper Text"
                id="Id"
                label="Label"
                margin="dense"
                onBlur={[MockFunction]}
                onChange={[MockFunction]}
                placeholder="Enter indicator name"
                required={false}
                select={false}
                type="text"
                value="value"
                variant="outlined"
              />
            </React.Fragment>,
            "label": "",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": "",
          },
          "ref": null,
          "rendered": "",
          "type": [Function],
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
