// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SelectInput unit test matches snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <SelectInput
    error=""
    helperText="Helper Text"
    id="Id"
    items={
      Array [
        Object {
          "id": 1,
          "name": "select value 1",
        },
        Object {
          "id": 2,
          "name": "select value 2",
        },
      ]
    }
    label="Label"
    onBlur={[MockFunction]}
    onChange={[MockFunction]}
    placeholder="Select indicator type"
    touched="true"
    value="value"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": Array [
        <WithStyles(InputLabel)
          htmlFor="Id"
        >
          Label
        </WithStyles(InputLabel)>,
        <WithStyles(Select)
          helperText="Helper Text"
          id="Id"
          inputProps={
            Object {
              "id": Object {
                "id": "Id",
              },
            }
          }
          name="Id"
          onBlur={[MockFunction]}
          onChange={[MockFunction]}
          placeholder="Select indicator type"
          value="value"
        >
          <WithStyles(MenuItem)
            value=""
          >
            <em>
              Select..
            </em>
          </WithStyles(MenuItem)>
          <WithStyles(MenuItem)
            value={1}
          >
            select value 1
          </WithStyles(MenuItem)>
          <WithStyles(MenuItem)
            value={2}
          >
            select value 2
          </WithStyles(MenuItem)>
        </WithStyles(Select)>,
        <WithStyles(FormHelperText)>
          
        </WithStyles(FormHelperText)>,
      ],
      "error": false,
      "style": Object {
        "margin": "15px",
        "marginLeft": "0px",
        "width": "240px",
      },
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": "Label",
          "htmlFor": "Id",
        },
        "ref": null,
        "rendered": "Label",
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            <WithStyles(MenuItem)
              value=""
            >
              <em>
                Select..
              </em>
            </WithStyles(MenuItem)>,
            Array [
              <WithStyles(MenuItem)
                value={1}
              >
                select value 1
              </WithStyles(MenuItem)>,
              <WithStyles(MenuItem)
                value={2}
              >
                select value 2
              </WithStyles(MenuItem)>,
            ],
          ],
          "helperText": "Helper Text",
          "id": "Id",
          "inputProps": Object {
            "id": Object {
              "id": "Id",
            },
          },
          "name": "Id",
          "onBlur": [MockFunction],
          "onChange": [MockFunction],
          "placeholder": "Select indicator type",
          "value": "value",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <em>
                Select..
              </em>,
              "value": "",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Select..",
              },
              "ref": null,
              "rendered": "Select..",
              "type": "em",
            },
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": "1",
            "nodeType": "class",
            "props": Object {
              "children": "select value 1",
              "value": 1,
            },
            "ref": null,
            "rendered": "select value 1",
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": "2",
            "nodeType": "class",
            "props": Object {
              "children": "select value 2",
              "value": 2,
            },
            "ref": null,
            "rendered": "select value 2",
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": "",
        },
        "ref": null,
        "rendered": "",
        "type": [Function],
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <WithStyles(InputLabel)
            htmlFor="Id"
          >
            Label
          </WithStyles(InputLabel)>,
          <WithStyles(Select)
            helperText="Helper Text"
            id="Id"
            inputProps={
              Object {
                "id": Object {
                  "id": "Id",
                },
              }
            }
            name="Id"
            onBlur={[MockFunction]}
            onChange={[MockFunction]}
            placeholder="Select indicator type"
            value="value"
          >
            <WithStyles(MenuItem)
              value=""
            >
              <em>
                Select..
              </em>
            </WithStyles(MenuItem)>
            <WithStyles(MenuItem)
              value={1}
            >
              select value 1
            </WithStyles(MenuItem)>
            <WithStyles(MenuItem)
              value={2}
            >
              select value 2
            </WithStyles(MenuItem)>
          </WithStyles(Select)>,
          <WithStyles(FormHelperText)>
            
          </WithStyles(FormHelperText)>,
        ],
        "error": false,
        "style": Object {
          "margin": "15px",
          "marginLeft": "0px",
          "width": "240px",
        },
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": "Label",
            "htmlFor": "Id",
          },
          "ref": null,
          "rendered": "Label",
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              <WithStyles(MenuItem)
                value=""
              >
                <em>
                  Select..
                </em>
              </WithStyles(MenuItem)>,
              Array [
                <WithStyles(MenuItem)
                  value={1}
                >
                  select value 1
                </WithStyles(MenuItem)>,
                <WithStyles(MenuItem)
                  value={2}
                >
                  select value 2
                </WithStyles(MenuItem)>,
              ],
            ],
            "helperText": "Helper Text",
            "id": "Id",
            "inputProps": Object {
              "id": Object {
                "id": "Id",
              },
            },
            "name": "Id",
            "onBlur": [MockFunction],
            "onChange": [MockFunction],
            "placeholder": "Select indicator type",
            "value": "value",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <em>
                  Select..
                </em>,
                "value": "",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Select..",
                },
                "ref": null,
                "rendered": "Select..",
                "type": "em",
              },
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": "1",
              "nodeType": "class",
              "props": Object {
                "children": "select value 1",
                "value": 1,
              },
              "ref": null,
              "rendered": "select value 1",
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": "2",
              "nodeType": "class",
              "props": Object {
                "children": "select value 2",
                "value": 2,
              },
              "ref": null,
              "rendered": "select value 2",
              "type": [Function],
            },
          ],
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": "",
          },
          "ref": null,
          "rendered": "",
          "type": [Function],
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
