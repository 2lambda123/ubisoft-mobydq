// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SwitchInput unit test matches snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <SwitchInput
    error=""
    id="Id"
    label="Label"
    onBlur={[MockFunction]}
    onChange={[MockFunction]}
    touched={true}
    value="true"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": Array [
        <WithStyles(WithFormControlContext(FormControlLabel))
          control={
            <React.Fragment>
              <WithStyles(Switch)
                id="Id"
                onBlur={[MockFunction]}
                onChange={[MockFunction]}
                value="true"
              />
            </React.Fragment>
          }
          label="Label"
        />,
        <WithStyles(WithFormControlContext(FormHelperText))>
          
        </WithStyles(WithFormControlContext(FormHelperText))>,
      ],
      "error": false,
      "style": Object {
        "width": "500px",
      },
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "control": <React.Fragment>
            <WithStyles(Switch)
              id="Id"
              onBlur={[MockFunction]}
              onChange={[MockFunction]}
              value="true"
            />
          </React.Fragment>,
          "label": "Label",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": "",
        },
        "ref": null,
        "rendered": "",
        "type": [Function],
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <WithStyles(WithFormControlContext(FormControlLabel))
            control={
              <React.Fragment>
                <WithStyles(Switch)
                  id="Id"
                  onBlur={[MockFunction]}
                  onChange={[MockFunction]}
                  value="true"
                />
              </React.Fragment>
            }
            label="Label"
          />,
          <WithStyles(WithFormControlContext(FormHelperText))>
            
          </WithStyles(WithFormControlContext(FormHelperText))>,
        ],
        "error": false,
        "style": Object {
          "width": "500px",
        },
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "control": <React.Fragment>
              <WithStyles(Switch)
                id="Id"
                onBlur={[MockFunction]}
                onChange={[MockFunction]}
                value="true"
              />
            </React.Fragment>,
            "label": "Label",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": "",
          },
          "ref": null,
          "rendered": "",
          "type": [Function],
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
