// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`DataSourceForm component unit test matches snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Formik
    data={
      Object {
        "allDataSourceTypes": Object {
          "nodes": Array [
            Object {
              "id": 1,
              "value": "mock data source",
            },
          ],
        },
      }
    }
    displayName="DataSourceForm"
    enableReinitialize={false}
    errors={
      Object {
        "connectionString": null,
        "dataSourceTypeId": null,
        "login": null,
        "name": null,
        "password": null,
      }
    }
    handleBlur={[MockFunction]}
    handleChange={[MockFunction]}
    handleSubmit={[Function]}
    initialFieldValues={null}
    initialValues={
      Object {
        "connectionString": "",
        "dataSourceTypeId": "",
        "login": "",
        "name": "",
        "password": "",
      }
    }
    isInitialValid={false}
    isSubmitting={false}
    onSubmit={[Function]}
    render={[Function]}
    touched={
      Object {
        "connectionString": false,
        "dataSourceTypeId": false,
        "login": false,
        "name": false,
        "password": false,
      }
    }
    validateOnBlur={true}
    validateOnChange={true}
    validationSchema={[Function]}
    values={
      Object {
        "connectionString": "",
        "dataSourceTypeId": "",
        "login": "",
        "name": "",
        "password": "",
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": <DataSourceFormFields
        data={
          Object {
            "allDataSourceTypes": Object {
              "nodes": Array [
                Object {
                  "id": 1,
                  "value": "mock data source",
                },
              ],
            },
          }
        }
        dirty={false}
        errors={Object {}}
        handleBlur={[Function]}
        handleChange={[Function]}
        handleReset={[Function]}
        handleSubmit={[Function]}
        initialFieldValues={null}
        initialValues={
          Object {
            "connectionString": "",
            "dataSourceTypeId": "",
            "login": "",
            "name": "",
            "password": "",
          }
        }
        isSubmitting={false}
        isValid={false}
        isValidating={false}
        registerField={[Function]}
        resetForm={[Function]}
        setError={[Function]}
        setErrors={[Function]}
        setFieldError={[Function]}
        setFieldTouched={[Function]}
        setFieldValue={[Function]}
        setFormikState={[Function]}
        setStatus={[Function]}
        setSubmitting={[Function]}
        setTouched={[Function]}
        setValues={[Function]}
        submitCount={0}
        submitForm={[Function]}
        touched={Object {}}
        unregisterField={[Function]}
        validateField={[Function]}
        validateForm={[Function]}
        validateOnBlur={true}
        validateOnChange={true}
        values={
          Object {
            "connectionString": "",
            "dataSourceTypeId": "",
            "login": "",
            "name": "",
            "password": "",
          }
        }
      />,
      "value": Object {
        "dirty": false,
        "errors": Object {},
        "handleBlur": [Function],
        "handleChange": [Function],
        "handleReset": [Function],
        "handleSubmit": [Function],
        "initialValues": Object {
          "connectionString": "",
          "dataSourceTypeId": "",
          "login": "",
          "name": "",
          "password": "",
        },
        "isSubmitting": false,
        "isValid": false,
        "isValidating": false,
        "registerField": [Function],
        "resetForm": [Function],
        "setError": [Function],
        "setErrors": [Function],
        "setFieldError": [Function],
        "setFieldTouched": [Function],
        "setFieldValue": [Function],
        "setFormikState": [Function],
        "setStatus": [Function],
        "setSubmitting": [Function],
        "setTouched": [Function],
        "setValues": [Function],
        "submitCount": 0,
        "submitForm": [Function],
        "touched": Object {},
        "unregisterField": [Function],
        "validate": undefined,
        "validateField": [Function],
        "validateForm": [Function],
        "validateOnBlur": true,
        "validateOnChange": true,
        "validationSchema": [Function],
        "values": Object {
          "connectionString": "",
          "dataSourceTypeId": "",
          "login": "",
          "name": "",
          "password": "",
        },
      },
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "data": Object {
          "allDataSourceTypes": Object {
            "nodes": Array [
              Object {
                "id": 1,
                "value": "mock data source",
              },
            ],
          },
        },
        "dirty": false,
        "errors": Object {},
        "handleBlur": [Function],
        "handleChange": [Function],
        "handleReset": [Function],
        "handleSubmit": [Function],
        "initialFieldValues": null,
        "initialValues": Object {
          "connectionString": "",
          "dataSourceTypeId": "",
          "login": "",
          "name": "",
          "password": "",
        },
        "isSubmitting": false,
        "isValid": false,
        "isValidating": false,
        "registerField": [Function],
        "resetForm": [Function],
        "setError": [Function],
        "setErrors": [Function],
        "setFieldError": [Function],
        "setFieldTouched": [Function],
        "setFieldValue": [Function],
        "setFormikState": [Function],
        "setStatus": [Function],
        "setSubmitting": [Function],
        "setTouched": [Function],
        "setValues": [Function],
        "submitCount": 0,
        "submitForm": [Function],
        "touched": Object {},
        "unregisterField": [Function],
        "validateField": [Function],
        "validateForm": [Function],
        "validateOnBlur": true,
        "validateOnChange": true,
        "values": Object {
          "connectionString": "",
          "dataSourceTypeId": "",
          "login": "",
          "name": "",
          "password": "",
        },
      },
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
    "type": Object {
      "$$typeof": Symbol(react.provider),
      "_context": Object {
        "$$typeof": Symbol(react.context),
        "Consumer": Object {
          "$$typeof": Symbol(react.context),
          "_calculateChangedBits": null,
          "_context": [Circular],
        },
        "Provider": [Circular],
        "_calculateChangedBits": null,
        "_currentRenderer": null,
        "_currentRenderer2": null,
        "_currentValue": Object {},
        "_currentValue2": Object {},
        "_threadCount": 0,
      },
    },
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": <DataSourceFormFields
          data={
            Object {
              "allDataSourceTypes": Object {
                "nodes": Array [
                  Object {
                    "id": 1,
                    "value": "mock data source",
                  },
                ],
              },
            }
          }
          dirty={false}
          errors={Object {}}
          handleBlur={[Function]}
          handleChange={[Function]}
          handleReset={[Function]}
          handleSubmit={[Function]}
          initialFieldValues={null}
          initialValues={
            Object {
              "connectionString": "",
              "dataSourceTypeId": "",
              "login": "",
              "name": "",
              "password": "",
            }
          }
          isSubmitting={false}
          isValid={false}
          isValidating={false}
          registerField={[Function]}
          resetForm={[Function]}
          setError={[Function]}
          setErrors={[Function]}
          setFieldError={[Function]}
          setFieldTouched={[Function]}
          setFieldValue={[Function]}
          setFormikState={[Function]}
          setStatus={[Function]}
          setSubmitting={[Function]}
          setTouched={[Function]}
          setValues={[Function]}
          submitCount={0}
          submitForm={[Function]}
          touched={Object {}}
          unregisterField={[Function]}
          validateField={[Function]}
          validateForm={[Function]}
          validateOnBlur={true}
          validateOnChange={true}
          values={
            Object {
              "connectionString": "",
              "dataSourceTypeId": "",
              "login": "",
              "name": "",
              "password": "",
            }
          }
        />,
        "value": Object {
          "dirty": false,
          "errors": Object {},
          "handleBlur": [Function],
          "handleChange": [Function],
          "handleReset": [Function],
          "handleSubmit": [Function],
          "initialValues": Object {
            "connectionString": "",
            "dataSourceTypeId": "",
            "login": "",
            "name": "",
            "password": "",
          },
          "isSubmitting": false,
          "isValid": false,
          "isValidating": false,
          "registerField": [Function],
          "resetForm": [Function],
          "setError": [Function],
          "setErrors": [Function],
          "setFieldError": [Function],
          "setFieldTouched": [Function],
          "setFieldValue": [Function],
          "setFormikState": [Function],
          "setStatus": [Function],
          "setSubmitting": [Function],
          "setTouched": [Function],
          "setValues": [Function],
          "submitCount": 0,
          "submitForm": [Function],
          "touched": Object {},
          "unregisterField": [Function],
          "validate": undefined,
          "validateField": [Function],
          "validateForm": [Function],
          "validateOnBlur": true,
          "validateOnChange": true,
          "validationSchema": [Function],
          "values": Object {
            "connectionString": "",
            "dataSourceTypeId": "",
            "login": "",
            "name": "",
            "password": "",
          },
        },
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "data": Object {
            "allDataSourceTypes": Object {
              "nodes": Array [
                Object {
                  "id": 1,
                  "value": "mock data source",
                },
              ],
            },
          },
          "dirty": false,
          "errors": Object {},
          "handleBlur": [Function],
          "handleChange": [Function],
          "handleReset": [Function],
          "handleSubmit": [Function],
          "initialFieldValues": null,
          "initialValues": Object {
            "connectionString": "",
            "dataSourceTypeId": "",
            "login": "",
            "name": "",
            "password": "",
          },
          "isSubmitting": false,
          "isValid": false,
          "isValidating": false,
          "registerField": [Function],
          "resetForm": [Function],
          "setError": [Function],
          "setErrors": [Function],
          "setFieldError": [Function],
          "setFieldTouched": [Function],
          "setFieldValue": [Function],
          "setFormikState": [Function],
          "setStatus": [Function],
          "setSubmitting": [Function],
          "setTouched": [Function],
          "setValues": [Function],
          "submitCount": 0,
          "submitForm": [Function],
          "touched": Object {},
          "unregisterField": [Function],
          "validateField": [Function],
          "validateForm": [Function],
          "validateOnBlur": true,
          "validateOnChange": true,
          "values": Object {
            "connectionString": "",
            "dataSourceTypeId": "",
            "login": "",
            "name": "",
            "password": "",
          },
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      "type": Object {
        "$$typeof": Symbol(react.provider),
        "_context": Object {
          "$$typeof": Symbol(react.context),
          "Consumer": Object {
            "$$typeof": Symbol(react.context),
            "_calculateChangedBits": null,
            "_context": [Circular],
          },
          "Provider": [Circular],
          "_calculateChangedBits": null,
          "_currentRenderer": null,
          "_currentRenderer2": null,
          "_currentValue": Object {},
          "_currentValue2": Object {},
          "_threadCount": 0,
        },
      },
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "childContextTypes": Object {
      "router": [Function],
    },
    "context": Object {
      "router": Object {
        "history": Object {
          "action": "POP",
          "block": [Function],
          "createHref": [Function],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "pathname": "/",
            "search": "",
            "state": undefined,
          },
          "push": [Function],
          "replace": [Function],
        },
        "route": Object {
          "location": Object {},
          "match": Object {},
        },
      },
    },
  },
}
`;
