# .circleci/config.yml
version: 2
jobs:

  build:
    docker:
      - image: circleci/python:3.7.0
    steps:
      - checkout
      - setup_remote_docker

      - run:
          name: Create Docker Compose configuration file
          when: always
          command: |
            echo "POSTGRES_USER=postgres" >> ./.env
            echo "POSTGRES_PASSWORD=password" >> ./.env
            echo "DATABASE_URL=postgres://postgres:password@db:5432/mobydq" >> ./.env
            echo "GRAPHQL_URL=http://graphql:5433/graphql" >> ./.env
            echo "MAIL_HOST=smtp.server.org" >> ./.env
            echo "MAIL_PORT=25" >> ./.env
            echo "MAIL_SENDER=change@me.com" >> ./.env
            echo "NODE_ENV=development" >> ./.env
            echo "REACT_FLASK_API_URL=http://api:5434/mobydq/api/v1/graphql" >> ./.env

      - run:
          name: Build Docker images
          when: always
          command: |
            docker-compose -f docker-compose.yml build db graphql api scripts
            docker-compose -f docker-compose.test.yml build app app-test
            docker-compose -f ./test/docker-compose.yml build
            docker images

      - run:
          name: Run Docker containers
          when: always
          command: |
            docker network create mobydq-network
            docker volume create mobydq-db-volume
            docker-compose -f docker-compose.yml up -d db graphql api
            docker ps -a

      - run:
          name: Run database tests
          when: always
          command: |
            # Run database tests
            docker-compose -f ./test/docker-compose.yml up test-db

      - run:
          name: Run API tests
          when: always
          command: |
            # Run API tests
            docker-compose -f ./test/docker-compose.yml up test-api

      - run:
          name: Run scripts tests
          when: always
          command: |
            # Start databases and wait for them to start properly
            docker-compose -f ./test/docker-compose.yml up -d db-sql-server db-mysql db-mariadb db-postgresql
            sleep 30

            # Run tests
            docker-compose -f ./test/docker-compose.yml up test-scripts

      - run:
          name: Run scripts linter
          when: always
          command: |
            docker run --name mobydq-test-scripts-lint mobydq-test-scripts /bin/bash -c "find . -iname \"*.py\" | xargs pylint --output-format=pylint2junit.JunitReporter > lint-results.xml"

      - run:
          name: Run app tests
          when: always
          command: |
            docker run --name mobydq-test-app -e JEST_JUNIT_OUTPUT="/reports/junit/js-test-results.xml" -e CI=true mobydq-test-app npm test -- --ci --reporters=jest-junit --updateSnapshot

      - run:
          name: Run app linter
          when: always
          command: |
            docker run --name mobydq-test-app-lint mobydq-test-app npm run lint -- --format junit -o /reports/junit/js-lint-results.xml

      - run:
          name: Collect tests results
          when: always
          command: |
            docker cp mobydq-test-db:/srv/test-results.xml ./test-results/
            docker cp mobydq-test-api:/srv/test-results.xml ./test-results/
            docker cp mobydq-test-scripts:/srv/test-results.xml ./test-results/
            docker cp mobydq-test-scripts-lint:/srv/lint-results.xml ./test-results/
            docker cp mobydq-test-app:/reports/junit/js-test-results.xml ./test-results/
            docker cp mobydq-test-app-lint:/reports/junit/js-lint-results.xml ./test-results/

      - store_test_results:
          path: ./test-results

      - store_artifacts:
          path: ./test-results
