# .circleci/config.yml
version: 2
jobs:

  build:
    docker:
      - image: circleci/python:3.7.0
    steps:
      - checkout
      - setup_remote_docker

      - run:
          name: Create Docker Compose configuration file
          command: |
            echo "POSTGRES_USER=postgres" >> ./.env
            echo "POSTGRES_PASSWORD=password" >> ./.env
            echo "DATABASE_URL=postgres://postgres:password@db:5432/mobydq" >> ./.env
            echo "GRAPHQL_URL=http://graphql:5433/graphql" >> ./.env
            echo "MAIL_HOST=smtp.server.org" >> ./.env
            echo "MAIL_PORT=25" >> ./.env
            echo "MAIL_SENDER=change@me.com" >> ./.env
            echo "NODE_ENV=development" >> ./.env
            echo "FLASK_API_URL=http://app:5434/graphql" >> ./.env

      - run:
          name: Build Docker images
          command: |
            docker-compose -f docker-compose.yml build db graphql api scripts
            docker-compose -f docker-compose.test.yml build app app-test
            docker-compose -f ./test/docker-compose.yml build
            docker images

      - run:
          name: Run Docker containers
          command: |
            docker network create mobydq-network
            docker volume create mobydq-db-volume
            docker-compose -f docker-compose.yml up -d db graphql api
            docker ps -a

      - run:
          name: Run backend tests
          command: |
            # Start databases and wait for them to start properly
            docker-compose -f ./test/docker-compose.yml up -d db-sql-server db-mysql db-mariadb db-postgresql
            sleep 30

            # Run tests
            docker-compose -f ./test/docker-compose.yml up test

            # Extract test results from container
            docker cp mobydq-test:/srv/test-results.xml ./test-results/

      - run:
          name: Run frontend tests
          command: |
            # Run tests
            docker run --name mobydq-app-test -e JEST_JUNIT_OUTPUT="/reports/junit/js-test-results.xml" -e CI=true mobydq-app-test npm test -- --ci --reporters=jest-junit
            docker cp mobydq-app-test:/reports/junit/js-test-results.xml ./test-results/

            # Run linter
            docker run --name mobydq-app-lint mobydq-app-test npm run lint -- --format junit -o /reports/junit/js-lint-results.xml
            docker cp mobydq-app-lint:/reports/junit/js-lint-results.xml ./test-results/

      - store_test_results:
          path: ./test-results

      - store_artifacts:
          path: ./test-results
