# .circleci/config.yml
version: 2
jobs:
    build:
        docker:
            - image: circleci/python:3.7.0
        steps:
            - checkout
            - setup_remote_docker

            - run:
                  name: Create Docker Compose configuration file
                  when: always
                  command: |
                      echo "POSTGRES_DB=mobydq" >> ./.env
                      echo "POSTGRES_USER=postgres" >> ./.env
                      echo "POSTGRES_PASSWORD=change_me" >> ./.env
                      echo "GRAPHQL_DATABASE_URL=postgres://postgres:change_me@db:5432/mobydq" >> ./.env
                      echo "GRAPHQL_PORT=5433" >> ./.env
                      echo "GRAPHQL_SECRET_KEY=change_me" >> ./.env
                      echo "MAIL_HOST=smtp.server.org" >> ./.env
                      echo "MAIL_PORT=25" >> ./.env
                      echo "MAIL_SENDER=change_me@change_me.com" >> ./.env
                      echo "MAIL_PASSWORD=change_me" >> ./.env

            - run:
                  name: Build Docker images
                  when: always
                  command: |
                      docker-compose -f docker-compose.yml -f docker-compose.test.yml build db-hive db-mariadb db-mysql db-postgresql db-sql-server
                      docker images

            - run:
                  name: Run Docker containers
                  when: always
                  command: |
                      docker-compose -f docker-compose.yml -f docker-compose.test.yml up -d db graphql
                      docker-compose -f docker-compose.yml -f docker-compose.test.yml up -d db-hive db-mariadb db-mysql db-postgresql db-sql-server
                      echo "Wait for test databases to be up and running"
                      sleep 240
                      docker ps -a

            - run:
                  name: Run database tests
                  when: always
                  command: |
                      docker-compose -f docker-compose.yml -f docker-compose.test.yml up --exit-code-from test-db test-db

            - run:
                  name: Run scripts tests
                  when: always
                  command: |
                      docker-compose -f docker-compose.yml -f docker-compose.test.yml up --exit-code-from test-scripts test-scripts

            - run:
                  name: Run python linter
                  when: always
                  command: |
                      docker run --name mobydq-test-lint-python mobydq-test-lint-python /bin/bash -c "pylint --output-format=pylint2junit.JunitReporter scripts test > lint-results-python.xml"

            - run:
                  name: Collect tests results
                  when: always
                  command: |
                      docker cp mobydq-test-db:/srv/test-results.xml ./test/results/test-results-db.xml
                      docker cp mobydq-test-scripts:/srv/test-results.xml ./test/results/test-results-scripts.xml
                      docker cp mobydq-test-lint-python:/srv/lint-results-python.xml ./test/results/

            - store_test_results:
                  path: ./test/results

            - store_artifacts:
                  path: ./test/results
