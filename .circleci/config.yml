# .circleci/config.yml
version: 2
jobs:

  build:
    docker:
      - image: circleci/python:3.7.0
    steps:
      - checkout
      - setup_remote_docker

      - run:
          name: Create Docker Compose configuration file
          when: always
          command: |
            echo "POSTGRES_DB=mobydq" >> ./.env
            echo "POSTGRES_USER=postgres" >> ./.env
            echo "POSTGRES_PASSWORD=password" >> ./.env
            echo "DATABASE_URL=postgres://postgres:password@db:5432/mobydq" >> ./.env
            echo "GRAPHQL_URL=http://graphql:5433/graphql" >> ./.env
            echo "MAIL_HOST=smtp.server.org" >> ./.env
            echo "MAIL_PORT=25" >> ./.env
            echo "MAIL_SENDER=change@me.com" >> ./.env
            echo "NODE_ENV=development" >> ./.env
            echo "REACT_FLASK_API_HOST=http://api:5434/mobydq/api/v1/graphql" >> ./.env
            echo "GITHUB_CLIENT_ID=client_id" >> ./.env
            echo "GITHUB_CLIENT_ID=client_secret" >> ./.env
            echo "GITHUB_REDIRECT_URI=http://localhost/mobydq/api/v1/security/oauth/github/callback" >> ./.env
            echo "GOOGLE_CLIENT_ID=client_id" >> ./.env
            echo "GOOGLE_CLIENT_SECRET=client_secret" >> ./.env
            echo "GOOGLE_REDIRECT_URI=http://localhost/mobydq/api/v1/security/oauth/github/callback" >> ./.env

      - run:
          name: Build Docker images
          when: always
          command: |
            # Build dev image of web app which is needed for its test image
            docker-compose -f docker-compose.yml -f docker-compose.dev.yml build app
            docker-compose -f docker-compose.yml -f docker-compose.test.yml build
            docker images

      - run:
          name: Run Docker containers
          when: always
          command: |
            docker network create mobydq-network
            docker volume create mobydq-db-volume
            docker-compose -f docker-compose.yml up -d db graphql api
            docker-compose -f docker-compose.yml -f docker-compose.test.yml up -d db-hive db-mysql db-mariadb db-postgresql db-sql-server
            docker ps -a
            # Wait for test databases to be up and running
            sleep 240

      - run:
          name: Run database tests
          when: always
          command: |
            docker-compose -f docker-compose.yml -f docker-compose.test.yml up --exit-code-from test-db test-db

      - run:
          name: Run API tests
          when: always
          command: |
            docker-compose -f docker-compose.yml -f docker-compose.test.yml up --exit-code-from test-api test-api

      - run:
          name: Run scripts tests
          when: always
          command: |
            docker-compose -f docker-compose.yml -f docker-compose.test.yml up --exit-code-from test-scripts test-scripts

      - run:
          name: Run python linter
          when: always
          command: |
            docker run --name mobydq-test-lint-python mobydq-test-lint-python /bin/bash -c "pylint --output-format=pylint2junit.JunitReporter scripts test api/api.py api/proxy api/health api/security > lint-results-python.xml"

      - run:
          name: Run app tests
          when: always
          command: |
            docker run --name mobydq-test-app -e JEST_JUNIT_OUTPUT="/reports/junit/test-results-app.xml" -e CI=true mobydq-test-app npm test -- --ci --reporters=jest-junit

      - run:
          name: Run app linter
          when: always
          command: |
            docker run --name mobydq-test-app-lint mobydq-test-app npm run lint -- --format junit -o /reports/junit/lint-results-js.xml

      - run:
          name: Collect tests results
          when: always
          command: |
            docker cp mobydq-test-db:/srv/test-results.xml ./test/results/test-results-db.xml
            docker cp mobydq-test-api:/srv/test-results.xml ./test/results/test-results-api.xml
            docker cp mobydq-test-scripts:/srv/test-results.xml ./test/results/test-results-scripts.xml
            docker cp mobydq-test-lint-python:/srv/lint-results-python.xml ./test/results/
            docker cp mobydq-test-app:/reports/junit/test-results-app.xml ./test/results/
            docker cp mobydq-test-app-lint:/reports/junit/lint-results-js.xml ./test/results/

      - store_test_results:
          path: ./test/results

      - store_artifacts:
          path: ./test/results
