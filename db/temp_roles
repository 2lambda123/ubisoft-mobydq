

WITH RECURSIVE user_role AS (
   SELECT oid AS id
   ,rolname AS name
   ,rolsuper AS flag_super_admin
   FROM pg_catalog.pg_roles
   WHERE rolname='user_example'

   UNION ALL

   SELECT c.oid AS id
   ,rolname AS name
   ,rolsuper AS flag_super_admin
   FROM user_role a
   INNER JOIN pg_catalog.pg_auth_members b ON a.id=b.member
   INNER JOIN pg_catalog.pg_roles c ON b.roleid=c.oid
)
SELECT id, name, flag_super_admin FROM user_role;





/*Create view user group*/
CREATE OR REPLACE VIEW base.user_group AS
  SELECT oid AS id
  , rolname AS name
  , rolsuper AS flag_super_admin
  FROM pg_catalog.pg_roles
  WHERE rolname LIKE 'user_group%';

COMMENT ON VIEW base.user_group IS
'User groups are used to partition data access for different groups of users.';





/*Create function to create a new user group, its grants and policies*/
CREATE OR REPLACE FUNCTION base.create_new_user_group(user_group_name TEXT)
RETURNS VOID AS $$
DECLARE
    new_user_group                     TEXT := 'user_group_' || user_group_name;
    new_user_group_admin               TEXT := new_user_group || '_admin';
    indicator_group_group_all_policy   TEXT := new_user_group || '_indicator_group_all';
    indicator_group_all_policy         TEXT := new_user_group || '_indicator_all';
    parameter_group_all_policy         TEXT := new_user_group || '_parameter_all';
    data_source_group_select_policy    TEXT := new_user_group || '_data_source_select';
    data_source_admin_all_policy       TEXT := new_user_group_admin || '_data_source_all';
    session_group_select_policy        TEXT := new_user_group || '_session_select';
    session_result_group_select_policy TEXT := new_user_group || '_session_result_select';
    batch_group_select_policy          TEXT := new_user_group || '_batch_all';
BEGIN

    EXECUTE 'CREATE ROLE ' || quote_ident(new_user_group);
    EXECUTE 'CREATE ROLE ' || quote_ident(new_user_group_admin);
    EXECUTE 'GRANT ' || quote_ident(new_user_group) || ' TO ' || quote_ident(new_user_group_admin);

    EXECUTE 'GRANT ALL    ON base.indicator_group
                  , base.indicator
                  , base.parameter
    TO'  || quote_ident(new_user_group);
    EXECUTE 'GRANT SELECT ON base.data_source
                  , base.data_source_type
                  , base.parameter_type
                  , base.indicator_type
                  , base.batch
                  , base.session
                  , base.session_result
    TO ' || quote_ident(new_user_group);
    EXECUTE 'GRANT ALL    ON base.data_source
    TO ' || quote_ident(new_user_group_admin);

    /*policy for indicator_group*/
    EXECUTE 'CREATE POLICY ' || quote_ident(indicator_group_group_all_policy) || ' ON
      base.indicator_group
    FOR ALL
    TO ' || quote_ident(new_user_group) || '
    USING (
      user_group = ''' || new_user_group || '''
    )';

    /*policy for indicator*/
    EXECUTE 'CREATE POLICY ' || quote_ident(indicator_group_all_policy) || ' ON
      base.indicator
    FOR ALL
    TO' || quote_ident(new_user_group) || '
    USING (
      user_group = ''' || new_user_group ||'''
    )';

    /*policy for parameter*/
    EXECUTE 'CREATE POLICY ' || quote_ident(parameter_group_all_policy) || ' ON
      base.parameter
    FOR ALL
    TO ' || quote_ident(new_user_group) || '
    USING (
      user_group = ''' || new_user_group || '''
    )';

    /*policies for data_source*/
    EXECUTE 'CREATE POLICY ' || quote_ident(data_source_group_select_policy) || ' ON
      base.data_source
    FOR SELECT
    TO ' || quote_ident(new_user_group) || '
    USING (
      user_group = ''' || new_user_group || '''
    )';

    EXECUTE 'CREATE POLICY ' || quote_ident(data_source_admin_all_policy) || ' ON
      base.data_source
    FOR ALL
    TO ' || quote_ident(new_user_group_admin) || '
    USING (
      user_group = ''' || new_user_group_admin || '''
    )';

    /*policy for session*/
    EXECUTE 'CREATE POLICY ' || quote_ident(session_group_select_policy) || ' ON
      base.session
    FOR SELECT
    TO ' || quote_ident(new_user_group) || '
    USING (
      user_group = ''' || new_user_group || '''
    )';

    /*policy for session_result*/
    EXECUTE 'CREATE POLICY ' || quote_ident(session_result_group_select_policy) || ' ON
      base.session_result
    FOR SELECT
    TO ' || quote_ident(new_user_group) || '
    USING (
      user_group = ''' || new_user_group || '''
    )';

    /*policy for batch*/
    EXECUTE 'CREATE POLICY '  || quote_ident(batch_group_select_policy) || ' ON
      base.batch
    FOR SELECT
    TO ' || quote_ident(new_user_group) || '
    USING (
      user_group = ''' || new_user_group || '''
    )';
END;
$$ LANGUAGE plpgsql VOLATILE SECURITY DEFINER;
COMMENT ON FUNCTION base.create_new_user_group IS
'Function used to create a new user group.';



/*Create function to get all user_group roles a certain user belongs to*/
CREATE OR REPLACE FUNCTION base.get_all_user_groups_by_user(user_name TEXT)
RETURNS TABLE (group_name TEXT) AS $$
BEGIN
    RETURN QUERY
    SELECT rolname ::TEXT FROM pg_roles
    WHERE rolname LIKE 'user_group%'
    AND  pg_has_role(user_name, rolname ::TEXT, 'MEMBER');
END;
$$ LANGUAGE plpgsql VOLATILE SECURITY DEFINER;
COMMENT ON FUNCTION base.get_all_user_groups_by_user IS
'Function used to get all user_group roles a user belongs to.';
