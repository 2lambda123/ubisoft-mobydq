name: Continuous Integration
on: [push]
jobs:
    test:
        runs-on: ubuntu-latest

        steps:
            - uses: actions/checkout@v2

            - name: Create Docker Compose configuration file
              run: |
                  echo "POSTGRES_DB=mobydq" >> ./.env
                  echo "POSTGRES_USER=postgres" >> ./.env
                  echo "POSTGRES_PASSWORD=change_me" >> ./.env
                  echo "GRAPHQL_DATABASE_URL=postgres://postgres:change_me@db:5432/mobydq" >> ./.env
                  echo "GRAPHQL_PORT=5433" >> ./.env
                  echo "GRAPHQL_SECRET_KEY=change_me" >> ./.env
                  echo "MAIL_HOST=smtp.server.org" >> ./.env
                  echo "MAIL_PORT=25" >> ./.env
                  echo "MAIL_SENDER=change_me@change_me.com" >> ./.env
                  echo "MAIL_PASSWORD=change_me" >> ./.env
                  echo "MAIL_BASE_URL=https://localhost" >> ./.env

            - name: Build Docker images
              run: |
                  docker-compose -f docker-compose.yml build db graphql
                  docker-compose -f docker-compose.yml -f docker-compose.test.yml build db-mariadb db-mysql db-postgresql
                  docker images

            - name: Run Docker containers
              run: |
                  docker-compose -f docker-compose.yml up -d db graphql
                  docker-compose -f docker-compose.yml -f docker-compose.test.yml up -d db-mariadb db-mysql db-postgresql
                  docker ps -a

            - name: Wait for databases to be up
              run: |
                  sh test/wait-for-it.sh -t 0 localhost:9999 -- echo "mobydq-test-db-mysql is up"
                  sh test/wait-for-it.sh -t 0 localhost:9998 -- echo "mobydq-test-db-mariadb is up"
                  sh test/wait-for-it.sh -t 0 localhost:9996 -- echo "mobydq-test-db-postgresql is up"

            - name: Run database tests
              run: docker-compose -f docker-compose.yml -f docker-compose.test.yml up test-db

            - name: Run scripts tests
              run: docker-compose -f docker-compose.yml -f docker-compose.test.yml up test-scripts

            - name: Run python linter
              run: docker-compose -f docker-compose.yml -f docker-compose.test.yml up test-lint-python
